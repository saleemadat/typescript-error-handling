#!/usr/bin/env bash

set -eu

if [ $# -eq 0 ]; then
    echo "Usage: "
    echo "  $(basename $0) <environment(dev|staging|prod)>"
    echo "Example: "
    echo "  $(basename $0) dev"
    echo "  $(basename $0) staging"
    echo "  $(basename $0) prod"
    exit 1
fi

# Vars

export APP_ENV=$1
. $PWD/.env
. $PWD/.k8s/vars/$APP_ENV.env

# Cluster Login

aws eks --region $AWS_REGION update-kubeconfig --name $ENVIRONMENT-eks-cluster

# Namespace

$PWD/bin/template \
  $PWD/.k8s/namespace.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Service Account Token

$PWD/bin/template \
  $PWD/.k8s/secret.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Service Account

$PWD/bin/template \
  $PWD/.k8s/service-account.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Role

$PWD/bin/template \
  $PWD/.k8s/role.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Role Binding

$PWD/bin/template \
  $PWD/.k8s/role-binding.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Deployment

$PWD/bin/template \
  $PWD/.k8s/deployment.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Service

$PWD/bin/template \
  $PWD/.k8s/service.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Horizontal Pod Autoscaler

$PWD/bin/template \
  $PWD/.k8s/horizontal-pod-autoscaler.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Ingress Controller

$PWD/bin/template \
  $PWD/.k8s/ingress.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Pod Disruption Budget

$PWD/bin/template \
  $PWD/.k8s/pod-disruption-budget.yaml \
  -f $PWD/.k8s/vars/$APP_ENV.env | kubectl apply -f -

# Ingress DNS

$PWD/bin/klbdns $ENVIRONMENT $DOMINION $SUBDOMINION $VERSION_NAME

# Rolling Restart

kubectl rollout restart deployment $ENVIRONMENT-$DOMINION-$SUBDOMINION-$VERSION_NAME-deployment -n $ENVIRONMENT-$DOMINION-$SUBDOMINION-$VERSION_NAME-namespace
