#!/usr/bin/env bash

set -eu

if [ $# -eq 0 ]; then
    echo "Usage: "
    echo "  $(basename $0) <environment(dev|staging|prod)> <build_number>"
    echo "Example: "
    echo "  $(basename $0) dev 3"
    echo "  $(basename $0) staging 2"
    echo "  $(basename $0) prod 1"
    exit 1
fi

APP_ENV=$1
CIRCLE_BUILD_NUM=$2
DOCKER_IMG_NAME=nate/microservice:$CIRCLE_BUILD_NUM
PACKAGE_VERSION=$(cat package.json | jq .version | sed "s/\"//g")

# Install 

aws codeartifact login --tool npm --domain nate-js --repository js --namespace @nate
yarn install

# Login

aws ecr get-login-password --region $AWS_REGION \
  | docker login --username AWS --password-stdin $ECR_URL

# Api

docker build -t $DOCKER_IMG_NAME -f $PWD/Dockerfile.app $PWD/
docker tag $DOCKER_IMG_NAME $ECR_URL:$CIRCLE_BUILD_NUM
docker push $ECR_URL:$CIRCLE_BUILD_NUM
docker tag $DOCKER_IMG_NAME $ECR_URL:$APP_ENV
docker push $ECR_URL:$APP_ENV
docker tag $DOCKER_IMG_NAME $ECR_URL:$PACKAGE_VERSION
docker push $ECR_URL:$PACKAGE_VERSION

# Cleanup 

IFS='/'
declare -a ECR_PARTS=($ECR_URL)
ECR_REPO=${ECR_PARTS[1]}
unset IFS
IMAGES_TO_DELETE=$(aws ecr list-images --region $AWS_REGION --repository-name $ECR_REPO --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
aws ecr batch-delete-image --region $AWS_REGION --repository-name $ECR_REPO --image-ids "$IMAGES_TO_DELETE" || true
