#!/usr/bin/env bash

set -eu

echo "NATE: Configuring project ... "

echo "Region?"
read AWS_REGION

echo "Dominion?"
read DOMINION

echo "Subdominion?"
read SUBDOMINION

echo "Owner?"
read OWNER

echo "Version?"
read VERSION_NAME

PCI_COMPLIANT=N
while true; do
    read -p "PCI Compliant [y/n]?" yn
    case $yn in
        [Yy]* ) PCI_COMPLIANT=Y; break;;
        [Nn]* ) PCI_COMPLIANT=N; break;;
        * ) echo "Please answer 'Y' or 'N'";;
    esac
done

echo "AWS_REGION=$AWS_REGION"
echo "DOMINION=$DOMINION"
echo "SUBDOMINION=$SUBDOMINION"
echo "VERSION_NAME=$VERSION_NAME"
echo "OWNER=$OWNER"
echo "PCI_COMPLIANT=$PCI_COMPLIANT"

replace_file() {
  file=$1
  find=$2
  replace=$3

  sed -i "s/$find.*/$replace/g" $file
}

replace_files() {

  export TERRAFORM_STATE=$AWS_REGION/services/$DOMINION-$SUBDOMINION-$VERSION_NAME-ecr/terraform.tfstate
  $PWD/bin/template $PWD/infrastructure/repository/providers.tpl > $PWD/infrastructure/repository/providers.tf

  export TERRAFORM_STATE=$AWS_REGION/services/$DOMINION-$SUBDOMINION-$VERSION_NAME/terraform.tfstate
  $PWD/bin/template $PWD/infrastructure/providers.tpl > $PWD/infrastructure/providers.tf

  replace_file "$PWD/.k8s/vars/dev.env" "AWS_REGION=" "AWS_REGION=$AWS_REGION"
  replace_file "$PWD/.k8s/vars/dev.env" "DOMINION=" "DOMINION=$DOMINION"
  replace_file "$PWD/.k8s/vars/dev.env" "SUBDOMINION=" "SUBDOMINION=$SUBDOMINION"
  replace_file "$PWD/.k8s/vars/dev.env" "OWNER=" "OWNER=$OWNER"
  replace_file "$PWD/.k8s/vars/dev.env" "VERSION_NAME=" "VERSION_NAME=$VERSION_NAME"

  replace_file "$PWD/.k8s/vars/staging.env" "AWS_REGION=" "AWS_REGION=$AWS_REGION"
  replace_file "$PWD/.k8s/vars/staging.env" "DOMINION=" "DOMINION=$DOMINION"
  replace_file "$PWD/.k8s/vars/staging.env" "SUBDOMINION=" "SUBDOMINION=$SUBDOMINION"
  replace_file "$PWD/.k8s/vars/staging.env" "OWNER=" "OWNER=$OWNER"
  replace_file "$PWD/.k8s/vars/staging.env" "VERSION_NAME=" "VERSION_NAME=$VERSION_NAME"

  replace_file "$PWD/.k8s/vars/prod.env" "AWS_REGION=" "AWS_REGION=$AWS_REGION"
  replace_file "$PWD/.k8s/vars/prod.env" "DOMINION=" "DOMINION=$DOMINION"
  replace_file "$PWD/.k8s/vars/prod.env" "SUBDOMINION=" "SUBDOMINION=$SUBDOMINION"
  replace_file "$PWD/.k8s/vars/prod.env" "OWNER=" "OWNER=$OWNER"
  replace_file "$PWD/.k8s/vars/prod.env" "VERSION_NAME=" "VERSION_NAME=$VERSION_NAME"

  if [ "$PCI_COMPLIANT" = "Y" ]; then 

    replace_file "$PWD/.k8s/vars/dev.env" "APP_ENV=" "APP_ENV=dev"
    replace_file "$PWD/.k8s/vars/dev.env" "ENVIRONMENT=" "ENVIRONMENT=dev-cde"

    replace_file "$PWD/.k8s/vars/staging.env" "APP_ENV=" "APP_ENV=staging"
    replace_file "$PWD/.k8s/vars/staging.env" "ENVIRONMENT=" "ENVIRONMENT=staging-cde"

    replace_file "$PWD/.k8s/vars/prod.env" "APP_ENV=" "APP_ENV=prod"
    replace_file "$PWD/.k8s/vars/prod.env" "ENVIRONMENT=" "ENVIRONMENT=prod-cde"

  else 

    replace_file "$PWD/.k8s/vars/dev.env" "APP_ENV=" "APP_ENV=dev"
    replace_file "$PWD/.k8s/vars/dev.env" "ENVIRONMENT=" "ENVIRONMENT=dev"

    replace_file "$PWD/.k8s/vars/staging.env" "APP_ENV=" "APP_ENV=staging"
    replace_file "$PWD/.k8s/vars/staging.env" "ENVIRONMENT=" "ENVIRONMENT=staging"

    replace_file "$PWD/.k8s/vars/prod.env" "APP_ENV=" "APP_ENV=prod"
    replace_file "$PWD/.k8s/vars/prod.env" "ENVIRONMENT=" "ENVIRONMENT=prod"

  fi
}

while true; do
    read -p "Continue [y/n]?" yn
    case $yn in
        [Yy]* ) replace_files; exit 0;;
        [Nn]* ) exit 1;;
        * ) echo "Please answer 'Y' or 'N'";;
    esac
done
